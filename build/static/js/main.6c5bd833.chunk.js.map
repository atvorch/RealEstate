{"version":3,"sources":["data/types.ts","data/constants.ts","components/ChartColorPallet/styled.ts","components/ChartColorPallet/index.tsx","pages/styled.ts","data/dataSource.ts","store/modules/filters/index.ts","store/modules/properties/index.ts","store/modules/properties/utils.ts","components/Filter/index.tsx","widgets/Filters/styled.ts","widgets/Filters/index.tsx","components/Marker/index.tsx","widgets/Map/index.tsx","widgets/PropertyDetails/styled.ts","widgets/PropertyDetails/constants.ts","widgets/PropertyDetails/SimpleInfo.tsx","widgets/PropertyDetails/index.tsx","widgets/PropertiesChart/index.tsx","pages/Home.tsx","store/index.ts","index.tsx"],"names":["PROPERTY_TYPE","PROPERTY_TYPE_OPTIONS","Object","values","PROPERTY_COLORS","Apartment","toLowerCase","Terraced","Detached","SemiDetached","BEDS_OPTIONS","BATHS_OPTIONS","Wrapper","styled","div","ColorWrapper","Color","props","color","ColorTitle","span","ChartColorPallet","className","map","propType","key","toLocaleLowerCase","Content","Header","header","ChartWrapper","ColorPallet","fetch","then","response","ok","Error","text","Papa","parse","data","catch","error","console","defaultState","propertyType","bedroomsQuantity","bathroomsQuantity","Actions","getLocalState","state","filters","reducer","action","type","payload","actions","setPropertyType","dispatch","properties","refreshSelectedProperty","setBedroomsQuantity","setBathroomsQuantity","selectors","getAllFilters","getPropertyType","getBedroomsQuantity","getBathroomsQuantity","selectedPropertyId","getProperties","getFilteredProperties","filteredProperties","filter","prop","beds","baths","filterProperties","getSelectedPropertyId","setSelectedPropertyId","id","loadProperties","dataSource","filtered","selectedId","some","address","getSelectedProperty","localState","find","Filter","title","options","selected","onChange","event","target","value","opt","FiltersWrapper","Title","FilterUi","connector","connect","MarkerUI","Marker","number","onClick","DUBLIN_GEPOSITION","lat","lng","style","flexGrow","width","bootstrapURLKeys","defaultCenter","defaultZoom","onGoogleApiLoaded","maps","length","bounds","LatLngBounds","forEach","lon","extend","LatLng","fitBounds","googleApiOnLoadHandler","index","SelectPropertyMessage","article","h1","InfoTitle","InfoValue","Picture","img","Info","InfoInRow","DETAILS_STRINGS","GoogleStreetView","Beds","Baths","PropertyType","Address","Sqm","Price","NoInfo","SimpleInfo","selectedProperty","sqm","price","src","Chart","PieChart","React","useMemo","types","keys","totalValue","label","dataEntry","useEffect","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","Home","document","getElementById"],"mappings":"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","file":"static/js/main.6c5bd833.chunk.js","sourcesContent":["export enum PROPERTY_TYPE {\r\n  Apartment = \"Apartment\",\r\n  Terraced = \"Terraced\",\r\n  Detached = \"Detached\",\r\n  SemiDetached = \"Semi-detached\",\r\n}\r\n\r\nexport interface Property {\r\n  address: string;\r\n  lat: string;\r\n  lon: string;\r\n  sqm: string;\r\n  price: string;\r\n  propertyType: PROPERTY_TYPE;\r\n  satelliteImage: string;\r\n  baths: string;\r\n  beds: string;\r\n}\r\n","import { PROPERTY_TYPE } from \"./types\";\r\n\r\nexport const PROPERTY_TYPE_OPTIONS = Object.values(PROPERTY_TYPE);\r\n\r\n//I have randomly selected color for each property type\r\nexport const PROPERTY_COLORS = {\r\n  [PROPERTY_TYPE.Apartment.toLowerCase()]: \"#8479f9\",\r\n  [PROPERTY_TYPE.Terraced.toLowerCase()]: \"#fb68c3\",\r\n  [PROPERTY_TYPE.Detached.toLowerCase()]: \"#0DAD8D\",\r\n  [PROPERTY_TYPE.SemiDetached.toLowerCase()]: \"orange\",\r\n} as const;\r\n\r\nexport const BEDS_OPTIONS = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"] as const;\r\nexport const BATHS_OPTIONS = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"] as const;\r\n\r\nexport default {\r\n  PROPERTY_TYPE_OPTIONS,\r\n  BEDS_OPTIONS,\r\n  BATHS_OPTIONS,\r\n};\r\n\r\n//It is not secure but for the test project I think it's not a big deal\r\nexport const GOOGLE_MAPS_API_KEY = \"AIzaSyDCMkF1zGMrDg0wIKFLzBoCp6tTibJQ7-k\";\r\n\r\nexport const STREET_VIEW_LINK_TEMPLATE =\r\n  \"https://maps.googleapis.com/maps/api/streetview?fov=80&heading=70&pitch=0&key=AIzaSyDCMkF1zGMrDg0wIKFLzBoCp6tTibJQ7-k&size=400x400\";\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const ColorWrapper = styled.div`\r\n  display: flex;\r\n  & + & {\r\n    margin-top: 10px;\r\n  }\r\n`;\r\n\r\nexport const Color = styled.div<{ color: string }>`\r\n  width: 20px;\r\n  height: 20px;\r\n  margin-right: 10px;\r\n  background: ${(props) => props.color};\r\n`;\r\nexport const ColorTitle = styled.span`\r\n  cursor: default;\r\n`;\r\n","import React from \"react\";\r\nimport { PROPERTY_COLORS } from \"data/constants\";\r\nimport { PROPERTY_TYPE } from \"data/types\";\r\nimport * as Styled from \"./styled\";\r\n\r\nexport const ChartColorPallet: React.FC<{ className?: string }> = ({\r\n  className,\r\n}) => {\r\n  return (\r\n    <Styled.Wrapper className={className}>\r\n      {Object.values(PROPERTY_TYPE).map((propType) => {\r\n        return (\r\n          <Styled.ColorWrapper\r\n            key={`colorPallet-${propType}`}\r\n            color={PROPERTY_COLORS[propType]}\r\n          >\r\n            <Styled.Color\r\n              color={PROPERTY_COLORS[propType.toLocaleLowerCase()]}\r\n            />\r\n            <Styled.ColorTitle>{propType}</Styled.ColorTitle>\r\n          </Styled.ColorWrapper>\r\n        );\r\n      })}\r\n    </Styled.Wrapper>\r\n  );\r\n};\r\n\r\nexport default ChartColorPallet;\r\n","import ChartColorPallet from \"components/ChartColorPallet\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 20px 20px 20px 50px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  height: 100%;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding-right: 30px;\r\n`;\r\n\r\nexport const ChartWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\nexport const ColorPallet = styled(ChartColorPallet)`\r\n  margin-left: 40px;\r\n`;\r\n","import { Property } from \"data/types\";\r\nimport Papa from 'papaparse';\r\n\r\nconst PROPERTIES_CSV_PATH = \"data.csv\";\r\n\r\nconst readFromFile = (filePath: string): Promise<void | Property[]> => {\r\n  return fetch(filePath)\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n      return response.text().then(text => {\r\n        const result = Papa.parse<Property>(text, {header: true});\r\n        return result.data;\r\n      });\r\n    })\r\n    .catch((error) => console.error(error));\r\n};\r\n\r\nconst loadProperties = (): Promise<void | Property[]> => readFromFile(PROPERTIES_CSV_PATH);\r\n\r\nexport default {\r\n  loadProperties\r\n};\r\n","import { RootState } from \"store\";\r\nimport { Reducer } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport properties from \"store/modules/properties\";\r\nexport interface FiltersState {\r\n  propertyType: string;\r\n  bedroomsQuantity: string;\r\n  bathroomsQuantity: string;\r\n}\r\n\r\nconst defaultState: FiltersState = {\r\n  propertyType: \"\",\r\n  bedroomsQuantity: \"\",\r\n  bathroomsQuantity: \"\",\r\n};\r\n\r\nconst Actions = {\r\n  setPropertyType: \"filtersModule/setProperyType\",\r\n  setBedroomsQuantity: \"filtersModule/setBedroomsQuantity\",\r\n  setBathroomsQuantity: \"filtersModule/setBathroomsQuantity\",\r\n} as const;\r\n\r\ninterface SetPropertyType {\r\n  type: typeof Actions.setPropertyType;\r\n  payload: string;\r\n}\r\n\r\ninterface SetBedroomsQuantity {\r\n  type: typeof Actions.setBedroomsQuantity;\r\n  payload: string;\r\n}\r\n\r\ninterface SetBathroomsQuantity {\r\n  type: typeof Actions.setBathroomsQuantity;\r\n  payload: string;\r\n}\r\n\r\ntype Actions = SetPropertyType | SetBedroomsQuantity | SetBathroomsQuantity;\r\n\r\nconst reducer: Reducer<FiltersState, Actions> = (\r\n  state = defaultState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case Actions.setPropertyType: {\r\n      return {\r\n        ...state,\r\n        propertyType: action.payload,\r\n      };\r\n    }\r\n    case Actions.setBedroomsQuantity: {\r\n      return {\r\n        ...state,\r\n        bedroomsQuantity: action.payload,\r\n      };\r\n    }\r\n    case Actions.setBathroomsQuantity: {\r\n      return {\r\n        ...state,\r\n        bathroomsQuantity: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//============== SELECTORS ================\r\n\r\nconst getLocalState = (state: RootState) => state.filters;\r\nconst getPropertyType = (state: RootState) => getLocalState(state).propertyType;\r\nconst getBedroomsQuantity = (state: RootState) =>\r\n  getLocalState(state).bedroomsQuantity;\r\nconst getBathroomsQuantity = (state: RootState) =>\r\n  getLocalState(state).bathroomsQuantity;\r\n\r\nconst getAllFilters = (state: RootState): FiltersState => {\r\n  return getLocalState(state);\r\n};\r\n//============== ACTIONS ================\r\nexport type ThunkResult<R> = ThunkAction<R, RootState, void, Actions>;\r\n\r\nconst setPropertyType = (propertyType: string): ThunkResult<void> => (\r\n  dispatch\r\n) => {\r\n  dispatch({\r\n    type: Actions.setPropertyType,\r\n    payload: propertyType,\r\n  });\r\n  dispatch(properties.actions.refreshSelectedProperty());\r\n};\r\n\r\nconst setBedroomsQuantity = (bedroomsQuantity: string) => (dispatch: any) => {\r\n  dispatch({\r\n    type: Actions.setBedroomsQuantity,\r\n    payload: bedroomsQuantity,\r\n  });\r\n  dispatch(properties.actions.refreshSelectedProperty());\r\n};\r\n\r\nconst setBathroomsQuantity = (bathroomsQuantity: string) => (dispatch: any) => {\r\n  dispatch({\r\n    type: Actions.setBathroomsQuantity,\r\n    payload: bathroomsQuantity,\r\n  });\r\n  dispatch(properties.actions.refreshSelectedProperty());\r\n};\r\n\r\nexport default {\r\n  reducer,\r\n  actions: {\r\n    setPropertyType,\r\n    setBedroomsQuantity,\r\n    setBathroomsQuantity,\r\n  },\r\n  selectors: {\r\n    getAllFilters,\r\n    getPropertyType,\r\n    getBedroomsQuantity,\r\n    getBathroomsQuantity,\r\n  },\r\n};\r\n","import { RootState } from \"store\";\r\nimport { Reducer } from \"redux\";\r\nimport { Property } from \"data/types\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport dataSource from \"data/dataSource\";\r\nimport filters from \"store/modules/filters\";\r\n\r\nimport { filterProperties } from \"../properties/utils\";\r\n\r\nexport interface PropertiesState {\r\n  properties: Property[];\r\n  selectedPropertyId: string;\r\n}\r\n\r\nconst defaultState: PropertiesState = {\r\n  properties: [],\r\n  selectedPropertyId: \"\",\r\n};\r\n\r\nconst Actions = {\r\n  setProperties: \"propertiesModule/setProperties\",\r\n  setSelectedPropertyId: \"propertiesModule/setSelectedPropertyId\",\r\n} as const;\r\n\r\ninterface SetProperties {\r\n  type: typeof Actions.setProperties;\r\n  payload: Property[];\r\n}\r\ninterface SetSelectedPropertyId {\r\n  type: typeof Actions.setSelectedPropertyId;\r\n  payload: string;\r\n}\r\n\r\ntype Actions = SetProperties | SetSelectedPropertyId;\r\n\r\nconst reducer: Reducer<PropertiesState, Actions> = (\r\n  state = defaultState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case Actions.setProperties: {\r\n      return {\r\n        ...state,\r\n        properties: action.payload,\r\n      };\r\n    }\r\n    case Actions.setSelectedPropertyId: {\r\n      return {\r\n        ...state,\r\n        selectedPropertyId: action.payload,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//============== SELECTORS ================\r\n\r\nconst getLocalState = (state: RootState): PropertiesState => state.properties;\r\nconst getProperties = (state: RootState) => getLocalState(state).properties;\r\nconst getFilteredProperties = (state: RootState) => {\r\n  const filteredProperties = filterProperties(\r\n    getProperties(state),\r\n    filters.selectors.getAllFilters(state)\r\n  );\r\n  return filteredProperties;\r\n};\r\nconst getSelectedPropertyId = (state: RootState) =>\r\n  getLocalState(state).selectedPropertyId;\r\n\r\nconst getSelectedProperty = (state: RootState) => {\r\n  const localState = getLocalState(state);\r\n  return localState.properties.find(\r\n    (prop) => prop.address === localState.selectedPropertyId\r\n  );\r\n};\r\n\r\n//============== ACTIONS ================\r\nexport type ThunkResult<R> = ThunkAction<R, RootState, void, Actions>;\r\n\r\nconst setProperties = (properties: Property[]): ThunkResult<void> => (\r\n  dispatch\r\n) => {\r\n  dispatch({\r\n    type: Actions.setProperties,\r\n    payload: properties,\r\n  });\r\n};\r\n\r\nconst setSelectedPropertyId = (id: string): ThunkResult<void> => (dispatch) => {\r\n  dispatch({\r\n    type: Actions.setSelectedPropertyId,\r\n    payload: id,\r\n  });\r\n};\r\n\r\nconst loadProperties = (): ThunkResult<Promise<void>> => (dispatch) => {\r\n  return dataSource.loadProperties().then(\r\n    (data) => {\r\n      if (data) {\r\n        dispatch(setProperties(data));\r\n      }\r\n    },\r\n    (error) => {\r\n      console.error(error);\r\n    }\r\n  );\r\n};\r\n\r\nconst refreshSelectedProperty = (): ThunkResult<void> => (dispatch, state) => {\r\n  const filtered = getFilteredProperties(state());\r\n  const selectedId = getSelectedPropertyId(state());\r\n  if (selectedId && !filtered.some((prop) => prop.address === selectedId)) {\r\n    dispatch(setSelectedPropertyId(\"\"));\r\n  }\r\n};\r\n\r\nexport default {\r\n  reducer,\r\n  actions: {\r\n    loadProperties,\r\n    setSelectedPropertyId,\r\n    refreshSelectedProperty,\r\n  },\r\n  selectors: {\r\n    getProperties,\r\n    getFilteredProperties,\r\n    getSelectedProperty,\r\n    getSelectedPropertyId,\r\n  },\r\n};\r\n","import { Property } from \"data/types\";\r\nimport { FiltersState } from \"../filters\";\r\n\r\nexport const filterProperties = (\r\n  properties: Property[] = [],\r\n  {\r\n    propertyType = \"\",\r\n    bedroomsQuantity = \"\",\r\n    bathroomsQuantity = \"\",\r\n  }: FiltersState\r\n): Property[] => {\r\n  let filteredProperties: Property[] = [...properties];\r\n\r\n  if (propertyType) {\r\n    filteredProperties = filteredProperties.filter(\r\n      (prop) =>\r\n        prop.propertyType.toLocaleLowerCase() ===\r\n        propertyType.toLocaleLowerCase()\r\n    );\r\n  }\r\n\r\n  if (bedroomsQuantity) {\r\n    filteredProperties = filteredProperties.filter(\r\n      (prop) => prop.beds === bedroomsQuantity\r\n    );\r\n  }\r\n\r\n  if (bathroomsQuantity) {\r\n    filteredProperties = filteredProperties.filter(\r\n      (prop) => prop.baths === bathroomsQuantity\r\n    );\r\n  }\r\n\r\n  return filteredProperties;\r\n};\r\n","import React from \"react\";\r\n\r\ninterface Filter {\r\n  title: string;\r\n  options: string[];\r\n  selected?: string;\r\n  onChange: (option: string) => void;\r\n  className?: string;\r\n}\r\n\r\nexport const Filter: React.FC<Filter> = ({\r\n  title,\r\n  options,\r\n  selected,\r\n  onChange,\r\n  className,\r\n}) => {\r\n  const changeOptionHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    onChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <select\r\n      className={className}\r\n      onChange={changeOptionHandler}\r\n      value={selected || \"\"}\r\n    >\r\n      <option value=\"\">{title}</option>\r\n      {options.map((opt) => {\r\n        return (\r\n          <option value={opt} key={`select-${title}-${opt}`}>\r\n            {opt}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import styled from \"styled-components\";\r\nimport FilterUi from \"components/Filter\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nexport const FiltersWrapper = styled.div`\r\n  height: 100px;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\nexport const Title = styled.span`\r\n  color: #3e88e4;\r\n  font-size: 24px;\r\n`;\r\nexport const Filter = styled(FilterUi)`\r\n  height: 30px;\r\n  width: 150px;\r\n  padding: 0 10px;\r\n  & + & {\r\n    margin-left: 50px;\r\n  }\r\n`;\r\n","import {\r\n  PROPERTY_TYPE_OPTIONS,\r\n  BATHS_OPTIONS,\r\n  BEDS_OPTIONS,\r\n} from \"data/constants\";\r\nimport React from \"react\";\r\nimport { RootState } from \"store\";\r\nimport filters from \"store/modules/filters\";\r\nimport { ConnectedProps, connect } from \"react-redux\";\r\nimport * as Styled from \"./styled\";\r\n\r\nconst connector = connect(\r\n  (state: RootState) => ({\r\n    propertyType: filters.selectors.getPropertyType(state),\r\n    bedroomsQuantity: filters.selectors.getBedroomsQuantity(state),\r\n    bathroomsQuantity: filters.selectors.getBathroomsQuantity(state),\r\n  }),\r\n  {\r\n    setPropertyType: filters.actions.setPropertyType,\r\n    setBathroomsQuantity: filters.actions.setBathroomsQuantity,\r\n    setBedroomsQuantity: filters.actions.setBedroomsQuantity,\r\n  }\r\n);\r\n\r\ntype ReduxProps = ConnectedProps<typeof connector>;\r\n\r\nexport const Filters: React.FC<ReduxProps> = ({\r\n  propertyType,\r\n  bedroomsQuantity,\r\n  bathroomsQuantity,\r\n  setPropertyType,\r\n  setBathroomsQuantity,\r\n  setBedroomsQuantity,\r\n}) => {\r\n  return (\r\n    <Styled.Wrapper>\r\n      <Styled.Title>Filter</Styled.Title>\r\n      <Styled.FiltersWrapper>\r\n        <Styled.Filter\r\n          title=\"Property Type\"\r\n          options={PROPERTY_TYPE_OPTIONS}\r\n          onChange={setPropertyType}\r\n          selected={propertyType}\r\n        />\r\n        <Styled.Filter\r\n          title=\"Bedrooms\"\r\n          options={BATHS_OPTIONS}\r\n          onChange={setBedroomsQuantity}\r\n          selected={bedroomsQuantity}\r\n        />\r\n        <Styled.Filter\r\n          title=\"Bathrooms\"\r\n          options={BEDS_OPTIONS}\r\n          onChange={setBathroomsQuantity}\r\n          selected={bathroomsQuantity}\r\n        />\r\n      </Styled.FiltersWrapper>\r\n    </Styled.Wrapper>\r\n  );\r\n};\r\n\r\nexport default connector(Filters);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface OwnProps {\r\n  number: number;\r\n  lat: string;\r\n  lng: string;\r\n  color: string;\r\n  onClick: () => void;\r\n  selected?: boolean;\r\n}\r\n\r\nconst MarkerUI = styled.div<{ color: string; selected?: boolean }>`\r\n  border-radius: 100%;\r\n  background-color: ${(props) => props.color};\r\n  width: 20px;\r\n  height: 20px;\r\n  text-align: center;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 0;\r\n  color: white;\r\n  cursor: pointer;\r\n  transition: 0.5s;\r\n  &:hover {\r\n    transform: scale(1.2);\r\n  }\r\n  box-shadow: ${(props) =>\r\n    props.selected ? \"0 0 11px 10px #2fd4c9;\" : \"none\"};\r\n`;\r\n\r\nexport const Marker: React.FC<OwnProps> = ({\r\n  number,\r\n  onClick,\r\n  color,\r\n  selected,\r\n}) => {\r\n  return (\r\n    <MarkerUI color={color} onClick={onClick} selected={selected}>\r\n      {number}\r\n    </MarkerUI>\r\n  );\r\n};\r\n\r\nexport default Marker;\r\n","import React from \"react\";\r\nimport { RootState } from \"store\";\r\nimport { ConnectedProps, connect } from \"react-redux\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport Marker from \"components/Marker\";\r\nimport properties from \"store/modules/properties\";\r\nimport { PROPERTY_COLORS, GOOGLE_MAPS_API_KEY } from \"data/constants\";\r\n\r\nconst connector = connect(\r\n  (state: RootState) => ({\r\n    filteredProperties: properties.selectors.getFilteredProperties(state),\r\n    selectedPropertyId: properties.selectors.getSelectedPropertyId(state),\r\n  }),\r\n  {\r\n    setSelectedPropertyId: properties.actions.setSelectedPropertyId,\r\n  }\r\n);\r\n\r\ntype ReduxProps = ConnectedProps<typeof connector>;\r\n\r\nconst DUBLIN_GEPOSITION = { lat: 53.35014, lng: -6.266155 };\r\nconst DEFAULT_ZOOM = 12;\r\n\r\nexport const Map: React.FC<ReduxProps> = ({\r\n  filteredProperties,\r\n  selectedPropertyId,\r\n  setSelectedPropertyId,\r\n}) => {\r\n  const googleApiOnLoadHandler = (map: any, maps: any) => {\r\n    if (filteredProperties && filteredProperties.length) {\r\n      const bounds = new maps.LatLngBounds();\r\n      filteredProperties.forEach(({ lat, lon }) => {\r\n        bounds.extend(new maps.LatLng(lat, lon));\r\n      });\r\n      map.fitBounds(bounds);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ flexGrow: 1, width: \"100%\" }}>\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: GOOGLE_MAPS_API_KEY }}\r\n        defaultCenter={DUBLIN_GEPOSITION}\r\n        defaultZoom={DEFAULT_ZOOM}\r\n        onGoogleApiLoaded={({ map, maps }) => googleApiOnLoadHandler(map, maps)}\r\n      >\r\n        {filteredProperties.length\r\n          ? filteredProperties.map((prop, index) => {\r\n              return (\r\n                <Marker\r\n                  key={`marker-${prop.address}`}\r\n                  lat={prop.lat}\r\n                  lng={prop.lon}\r\n                  onClick={() => setSelectedPropertyId(prop.address)}\r\n                  number={index + 1}\r\n                  color={PROPERTY_COLORS[prop.propertyType.toLowerCase()]}\r\n                  selected={prop.address === selectedPropertyId}\r\n                />\r\n              );\r\n            })\r\n          : null}\r\n      </GoogleMapReact>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connector(Map);\r\n","import styled from \"styled-components\";\r\n\r\nexport const SelectPropertyMessage = styled.span`\r\n  font-size: 20px;\r\n  margin-top: 28px;\r\n`;\r\n\r\nexport const Wrapper = styled.article`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 300px;\r\n  border: 1px dashed #3e88e469;\r\n  padding-right: 20px;\r\n  margin-right: 20px;\r\n  border-width: 0 2px 0 0;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  cursor: default;\r\n  color: #3e88e4;\r\n  margin: 0 0 83px;\r\n`;\r\n\r\nexport const InfoTitle = styled.span`\r\n  margin-bottom: 10px;\r\n  color: #3e88e4;\r\n  cursor: default;\r\n`;\r\nexport const InfoValue = styled.span`\r\n  color: black;\r\n  cursor: default;\r\n  text-transform: capitalize;\r\n`;\r\n\r\nexport const Picture = styled.img`\r\n  width: 200px;\r\n  height: 200px;\r\n  background: lightgray;\r\n  width: 100%;\r\n  object-fit: cover;\r\n`;\r\n\r\nexport const Info = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  & + & {\r\n    margin-top: 20px;\r\n  }\r\n`;\r\nexport const InfoInRow = styled.div`\r\n  display: flex;\r\n  margin: 20px 0;\r\n  ${Info} + ${Info} {\r\n    margin: 0 0 0 30px;\r\n  }\r\n`;\r\n","export const DETAILS_STRINGS = {\r\n  Title: \"Property Details\",\r\n  GoogleStreetView: \"Google Street View\",\r\n  Beds: \"Beds\",\r\n  Baths: \"Baths\",\r\n  PropertyType: \"Property Type\",\r\n  Address: \"Address\",\r\n  Sqm: \"Sqm\",\r\n  Price: \"Price\",\r\n  NoInfo: \"Not specified\",\r\n};\r\n\r\nexport default DETAILS_STRINGS;\r\n","import React from \"react\";\r\nimport * as Styled from \"./styled\";\r\n\r\ninterface Info {\r\n  title: string;\r\n  text: string;\r\n}\r\nconst SimpleInfo: React.FC<Info> = ({ title, text }) => {\r\n  return (\r\n    <Styled.Info>\r\n      <Styled.InfoTitle>{title}</Styled.InfoTitle>\r\n      <Styled.InfoValue>{text}</Styled.InfoValue>\r\n    </Styled.Info>\r\n  );\r\n};\r\n\r\nexport default SimpleInfo;\r\n","import React from \"react\";\r\nimport * as Styled from \"../../widgets/PropertyDetails/styled\";\r\nimport { STREET_VIEW_LINK_TEMPLATE } from \"data/constants\";\r\nimport { Property } from \"data/types\";\r\nimport DETAILS_STRINGS from \"./constants\";\r\nimport properties from \"store/modules/properties\";\r\nimport { RootState } from \"store\";\r\nimport { ConnectedProps, connect } from \"react-redux\";\r\nimport SimpleInfo from \"./SimpleInfo\";\r\n\r\nconst connector = connect((state: RootState) => ({\r\n  selectedProperty: properties.selectors.getSelectedProperty(state),\r\n}));\r\n\r\ntype ReduxProps = ConnectedProps<typeof connector>;\r\n\r\nexport const PropertyDetails: React.FC<ReduxProps> = ({ selectedProperty }) => {\r\n  if (!selectedProperty) {\r\n    return (\r\n      <Styled.Wrapper>\r\n        <Styled.Title>{DETAILS_STRINGS.Title}</Styled.Title>\r\n        <Styled.SelectPropertyMessage>\r\n          Select Property for Details\r\n        </Styled.SelectPropertyMessage>\r\n      </Styled.Wrapper>\r\n    );\r\n  }\r\n\r\n  const {\r\n    propertyType,\r\n    address,\r\n    lat,\r\n    lon,\r\n    sqm,\r\n    price,\r\n    beds,\r\n    baths,\r\n  } = selectedProperty as Property;\r\n\r\n  return (\r\n    <Styled.Wrapper>\r\n      <Styled.Title>{DETAILS_STRINGS.Title}</Styled.Title>\r\n      <Styled.InfoTitle>{DETAILS_STRINGS.GoogleStreetView}</Styled.InfoTitle>\r\n      <Styled.Picture\r\n        src={`${STREET_VIEW_LINK_TEMPLATE}&location=${lat},${lon}`}\r\n      />\r\n      <Styled.InfoInRow>\r\n        <SimpleInfo\r\n          title={DETAILS_STRINGS.Beds}\r\n          text={beds || DETAILS_STRINGS.NoInfo}\r\n        />\r\n        <SimpleInfo\r\n          title={DETAILS_STRINGS.Baths}\r\n          text={baths || DETAILS_STRINGS.NoInfo}\r\n        />\r\n      </Styled.InfoInRow>\r\n\r\n      <SimpleInfo\r\n        title={DETAILS_STRINGS.PropertyType}\r\n        text={\r\n          propertyType ? propertyType.toLowerCase() : DETAILS_STRINGS.NoInfo\r\n        }\r\n      />\r\n      <SimpleInfo\r\n        title={DETAILS_STRINGS.Address}\r\n        text={address ? address.toLowerCase() : DETAILS_STRINGS.NoInfo}\r\n      />\r\n      <SimpleInfo\r\n        title={DETAILS_STRINGS.Sqm}\r\n        text={sqm || DETAILS_STRINGS.NoInfo}\r\n      />\r\n      <SimpleInfo\r\n        title={DETAILS_STRINGS.Price}\r\n        text={`€${price || DETAILS_STRINGS.NoInfo}`}\r\n      />\r\n    </Styled.Wrapper>\r\n  );\r\n};\r\n\r\nexport default connector(PropertyDetails);\r\n","import React from \"react\";\r\nimport { PieChart } from \"react-minimal-pie-chart\";\r\nimport properties from \"store/modules/properties\";\r\nimport { ConnectedProps, connect } from \"react-redux\";\r\nimport { RootState } from \"store\";\r\nimport { PROPERTY_COLORS } from \"data/constants\";\r\nimport styled from \"styled-components\";\r\n\r\nconst connector = connect((state: RootState) => ({\r\n  properties: properties.selectors.getProperties(state),\r\n}));\r\n\r\ntype ReduxProps = ConnectedProps<typeof connector>;\r\n\r\nconst Chart = styled(PieChart)`\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 100%;\r\n`;\r\n\r\nexport const PropertiesChart: React.FC<ReduxProps> = ({ properties }) => {\r\n  const data = React.useMemo(() => {\r\n    const types = [...properties].map((props) =>\r\n      props.propertyType.toLowerCase()\r\n    );\r\n    const data: { [key: string]: number } = {};\r\n\r\n    types.forEach((propType) => {\r\n      data[propType] = (data[propType] || 0) + 1;\r\n    });\r\n\r\n    return Object.keys(data).map((propType) => {\r\n      return {\r\n        title: propType,\r\n        color: PROPERTY_COLORS[propType],\r\n        value: data[propType],\r\n      };\r\n    });\r\n  }, [properties]);\r\n\r\n  return (\r\n    <Chart\r\n      data={data}\r\n      totalValue={properties.length}\r\n      label={({ dataEntry }) => dataEntry.value}\r\n    />\r\n  );\r\n};\r\n\r\nexport default connector(PropertiesChart);\r\n","import React from \"react\";\r\nimport * as Styled from \"./styled\";\r\nimport properties from \"store/modules/properties\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { RootState } from \"store\";\r\nimport { Property } from \"data/types\";\r\nimport Filters from \"widgets/Filters\";\r\nimport Map from \"widgets/Map\";\r\nimport PropertyDetails from \"widgets/PropertyDetails\";\r\nimport PropertiesChart from \"widgets/PropertiesChart\";\r\n\r\ninterface StateProps {\r\n  properties: Property[];\r\n}\r\nconst connector = connect(\r\n  (state: RootState) => ({\r\n    properties: properties.selectors.getProperties(state),\r\n  }),\r\n  {\r\n    loadProperties: properties.actions.loadProperties,\r\n  }\r\n);\r\n\r\ntype ReduxProps = ConnectedProps<typeof connector>;\r\n\r\nexport const Main: React.FC<StateProps & ReduxProps> = ({\r\n  properties,\r\n  loadProperties,\r\n}) => {\r\n  React.useEffect(() => {\r\n    if (!properties || !properties.length) {\r\n      loadProperties();\r\n    }\r\n  }, [properties, loadProperties]);\r\n\r\n  return (\r\n    <Styled.Wrapper>\r\n      <PropertyDetails />\r\n      <Styled.Content>\r\n        <Styled.Header>\r\n          <Filters />\r\n          <Styled.ChartWrapper>\r\n            <PropertiesChart />\r\n            <Styled.ColorPallet />\r\n          </Styled.ChartWrapper>\r\n        </Styled.Header>\r\n        <Map />\r\n      </Styled.Content>\r\n    </Styled.Wrapper>\r\n  );\r\n};\r\n\r\nexport default connector(Main);\r\n","import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport properties, { PropertiesState } from \"./modules/properties\";\r\nimport filters, { FiltersState } from \"./modules/filters\";\r\nimport { createStore, applyMiddleware, combineReducers, Reducer } from \"redux\";\r\n\r\nexport interface RootState {\r\n  properties: PropertiesState;\r\n  filters: FiltersState;\r\n}\r\n\r\nexport const rootReducer: Reducer<RootState> = combineReducers<RootState>({\r\n  properties: properties.reducer,\r\n  filters: filters.reducer,\r\n});\r\n\r\nexport function initStore() {\r\n  return createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Home from \"./pages/Home\";\r\n\r\nimport { initStore } from \"store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst store = initStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Home />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}