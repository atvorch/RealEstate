{"version":3,"sources":["data/types.ts","data/constants.ts","components/ChartColorPallet/styled.ts","components/ChartColorPallet/index.tsx","utils/devices.ts","pages/styled.ts","data/dataSource.ts","store/modules/filters/index.ts","store/modules/properties/index.ts","store/modules/properties/utils.ts","components/Filter/index.tsx","widgets/Filters/styled.ts","widgets/Filters/index.tsx","components/Marker/index.tsx","widgets/Map/styled.ts","widgets/Map/index.tsx","widgets/PropertyDetails/styled.ts","widgets/PropertyDetails/constants.ts","widgets/PropertyDetails/SimpleInfo.tsx","widgets/PropertyDetails/index.tsx","widgets/PropertiesChart/index.tsx","pages/Home.tsx","store/index.ts","index.tsx"],"names":["PROPERTY_TYPE","PROPERTY_TYPE_OPTIONS","Object","values","PROPERTY_COLORS","Apartment","toLowerCase","Terraced","Detached","SemiDetached","BEDS_OPTIONS","BATHS_OPTIONS","Wrapper","styled","div","ColorWrapper","Color","props","color","ColorTitle","span","ChartColorPallet","className","map","propType","key","toLocaleLowerCase","device","largeMobile","tablet","desktop","Content","Header","header","ChartWrapper","ColorPallet","fetch","then","response","ok","Error","text","Papa","parse","data","catch","error","console","defaultState","propertyType","bedroomsQuantity","bathroomsQuantity","Actions","getLocalState","state","filters","reducer","action","type","payload","actions","setPropertyType","dispatch","properties","refreshSelectedProperty","setBedroomsQuantity","setBathroomsQuantity","selectors","getAllFilters","getPropertyType","getBedroomsQuantity","getBathroomsQuantity","selectedPropertyId","getProperties","getFilteredProperties","filteredProperties","filter","prop","beds","baths","filterProperties","getSelectedPropertyId","setSelectedPropertyId","id","loadProperties","dataSource","filtered","selectedId","some","address","getSelectedProperty","localState","find","Filter","title","options","selected","onChange","event","target","value","opt","FiltersWrapper","Title","FilterUi","connector","connect","MarkerUI","Marker","number","onClick","MapWrapper","MessageWrapper","isVisible","DEFAULT_CENTER","lat","lng","length","bootstrapURLKeys","defaultCenter","defaultZoom","onGoogleApiLoaded","maps","bounds","LatLngBounds","forEach","lon","extend","LatLng","fitBounds","googleApiOnLoadHandler","index","SelectPropertyMessage","article","h1","InfoTitle","InfoValue","Picture","img","Info","InfoInRow","DETAILS_STRINGS","GoogleStreetView","Beds","Baths","PropertyType","Address","Sqm","Price","NoInfo","SimpleInfo","selectedProperty","sqm","price","src","Chart","PieChart","React","useMemo","types","keys","totalValue","label","dataEntry","useEffect","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","Home","document","getElementById"],"mappings":"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","file":"static/js/main.df306d23.chunk.js","sourcesContent":["export enum PROPERTY_TYPE {\n  Apartment = \"Apartment\",\n  Terraced = \"Terraced\",\n  Detached = \"Detached\",\n  SemiDetached = \"Semi-detached\",\n}\n\nexport interface Property {\n  address: string;\n  lat: string;\n  lon: string;\n  sqm: string;\n  price: string;\n  propertyType: PROPERTY_TYPE;\n  satelliteImage: string;\n  baths: string;\n  beds: string;\n}\n","import { PROPERTY_TYPE } from \"./types\";\n\nexport const PROPERTY_TYPE_OPTIONS = Object.values(PROPERTY_TYPE);\n\n//I have randomly selected color for each property type\nexport const PROPERTY_COLORS = {\n  [PROPERTY_TYPE.Apartment.toLowerCase()]: \"#8479f9\",\n  [PROPERTY_TYPE.Terraced.toLowerCase()]: \"#fb68c3\",\n  [PROPERTY_TYPE.Detached.toLowerCase()]: \"#0DAD8D\",\n  [PROPERTY_TYPE.SemiDetached.toLowerCase()]: \"orange\",\n} as const;\n\nexport const BEDS_OPTIONS = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"] as const;\nexport const BATHS_OPTIONS = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"] as const;\n\nexport default {\n  PROPERTY_TYPE_OPTIONS,\n  BEDS_OPTIONS,\n  BATHS_OPTIONS,\n};\n\n//It is not secure but for the test project I think it's not a big deal\nexport const GOOGLE_MAPS_API_KEY = \"AIzaSyDCMkF1zGMrDg0wIKFLzBoCp6tTibJQ7-k\";\n\nexport const STREET_VIEW_LINK_TEMPLATE =\n  \"https://maps.googleapis.com/maps/api/streetview?fov=80&heading=70&pitch=0&key=AIzaSyDCMkF1zGMrDg0wIKFLzBoCp6tTibJQ7-k&size=400x400\";\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ColorWrapper = styled.div`\n  display: flex;\n  & + & {\n    margin-top: 10px;\n  }\n`;\n\nexport const Color = styled.div<{ color: string }>`\n  width: 20px;\n  height: 20px;\n  margin-right: 10px;\n  background: ${(props) => props.color};\n`;\nexport const ColorTitle = styled.span`\n  cursor: default;\n  white-space: nowrap;\n`;\n","import React from \"react\";\nimport { PROPERTY_COLORS } from \"data/constants\";\nimport { PROPERTY_TYPE } from \"data/types\";\nimport * as Styled from \"./styled\";\n\nexport const ChartColorPallet: React.FC<{ className?: string }> = ({\n  className,\n}) => {\n  return (\n    <Styled.Wrapper className={className}>\n      {Object.values(PROPERTY_TYPE).map((propType) => {\n        return (\n          <Styled.ColorWrapper\n            key={`colorPallet-${propType}`}\n            color={PROPERTY_COLORS[propType]}\n          >\n            <Styled.Color\n              color={PROPERTY_COLORS[propType.toLocaleLowerCase()]}\n            />\n            <Styled.ColorTitle>{propType}</Styled.ColorTitle>\n          </Styled.ColorWrapper>\n        );\n      })}\n    </Styled.Wrapper>\n  );\n};\n\nexport default ChartColorPallet;\n","const device = {\n  largeMobile: \"(min-width: 500px)\",\n  tablet: \"(min-width: 768px)\",\n  desktop: \"(min-width: 1025px)\",\n};\n\nexport default device;\n","import ChartColorPallet from \"components/ChartColorPallet\";\nimport styled from \"styled-components\";\nimport device from \"utils/devices\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  margin: 20px;\n  box-sizing: border-box;\n  flex-direction: column;\n  flex-grow: 1;\n  width: calc(100% - 40px);\n  @media ${device.tablet} {\n    flex-direction: row;\n  }\n  @media ${device.desktop} {\n    width: calc(100% - 70px);\n    margin: 20px 20px 20px 50px;\n  }\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  @media ${device.tablet} {\n    height: 100%;\n    flex-grow: 1;\n  }\n`;\n\nexport const Header = styled.header`\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  width: 100%;\n  flex-shrink: 0;\n\n  @media ${device.desktop} {\n    flex-direction: row;\n    padding-right: 30px;\n  }\n`;\n\nexport const ChartWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 20px;\n  align-self: flex-end;\n`;\nexport const ColorPallet = styled(ChartColorPallet)`\n  display: none;\n  @media ${device.largeMobile} {\n    margin-left: 40px;\n    display: flex;\n  }\n`;\n","import { Property } from \"data/types\";\nimport Papa from 'papaparse';\n\nconst PROPERTIES_CSV_PATH = \"data.csv\";\n\nconst readFromFile = (filePath: string): Promise<void | Property[]> => {\n  return fetch(filePath)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return response.text().then(text => {\n        const result = Papa.parse<Property>(text, {header: true});\n        return result.data;\n      });\n    })\n    .catch((error) => console.error(error));\n};\n\nconst loadProperties = (): Promise<void | Property[]> => readFromFile(PROPERTIES_CSV_PATH);\n\nexport default {\n  loadProperties\n};\n","import { RootState } from \"store\";\nimport { Reducer } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport properties from \"store/modules/properties\";\nexport interface FiltersState {\n  propertyType: string;\n  bedroomsQuantity: string;\n  bathroomsQuantity: string;\n}\n\nconst defaultState: FiltersState = {\n  propertyType: \"\",\n  bedroomsQuantity: \"\",\n  bathroomsQuantity: \"\",\n};\n\nconst Actions = {\n  setPropertyType: \"filtersModule/setProperyType\",\n  setBedroomsQuantity: \"filtersModule/setBedroomsQuantity\",\n  setBathroomsQuantity: \"filtersModule/setBathroomsQuantity\",\n} as const;\n\ninterface SetPropertyType {\n  type: typeof Actions.setPropertyType;\n  payload: string;\n}\n\ninterface SetBedroomsQuantity {\n  type: typeof Actions.setBedroomsQuantity;\n  payload: string;\n}\n\ninterface SetBathroomsQuantity {\n  type: typeof Actions.setBathroomsQuantity;\n  payload: string;\n}\n\ntype Actions = SetPropertyType | SetBedroomsQuantity | SetBathroomsQuantity;\n\nconst reducer: Reducer<FiltersState, Actions> = (\n  state = defaultState,\n  action\n) => {\n  switch (action.type) {\n    case Actions.setPropertyType: {\n      return {\n        ...state,\n        propertyType: action.payload,\n      };\n    }\n    case Actions.setBedroomsQuantity: {\n      return {\n        ...state,\n        bedroomsQuantity: action.payload,\n      };\n    }\n    case Actions.setBathroomsQuantity: {\n      return {\n        ...state,\n        bathroomsQuantity: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\n//============== SELECTORS ================\n\nconst getLocalState = (state: RootState) => state.filters;\nconst getPropertyType = (state: RootState) => getLocalState(state).propertyType;\nconst getBedroomsQuantity = (state: RootState) =>\n  getLocalState(state).bedroomsQuantity;\nconst getBathroomsQuantity = (state: RootState) =>\n  getLocalState(state).bathroomsQuantity;\n\nconst getAllFilters = (state: RootState): FiltersState => {\n  return getLocalState(state);\n};\n//============== ACTIONS ================\nexport type ThunkResult<R> = ThunkAction<R, RootState, void, Actions>;\n\nconst setPropertyType = (propertyType: string): ThunkResult<void> => (\n  dispatch\n) => {\n  dispatch({\n    type: Actions.setPropertyType,\n    payload: propertyType,\n  });\n  dispatch(properties.actions.refreshSelectedProperty());\n};\n\nconst setBedroomsQuantity = (bedroomsQuantity: string) => (dispatch: any) => {\n  dispatch({\n    type: Actions.setBedroomsQuantity,\n    payload: bedroomsQuantity,\n  });\n  dispatch(properties.actions.refreshSelectedProperty());\n};\n\nconst setBathroomsQuantity = (bathroomsQuantity: string) => (dispatch: any) => {\n  dispatch({\n    type: Actions.setBathroomsQuantity,\n    payload: bathroomsQuantity,\n  });\n  dispatch(properties.actions.refreshSelectedProperty());\n};\n\nexport default {\n  reducer,\n  actions: {\n    setPropertyType,\n    setBedroomsQuantity,\n    setBathroomsQuantity,\n  },\n  selectors: {\n    getAllFilters,\n    getPropertyType,\n    getBedroomsQuantity,\n    getBathroomsQuantity,\n  },\n};\n","import { RootState } from \"store\";\nimport { Reducer } from \"redux\";\nimport { Property } from \"data/types\";\nimport { ThunkAction } from \"redux-thunk\";\nimport dataSource from \"data/dataSource\";\nimport filters from \"store/modules/filters\";\n\nimport { filterProperties } from \"../properties/utils\";\n\nexport interface PropertiesState {\n  properties: Property[];\n  selectedPropertyId: string;\n}\n\nconst defaultState: PropertiesState = {\n  properties: [],\n  selectedPropertyId: \"\",\n};\n\nconst Actions = {\n  setProperties: \"propertiesModule/setProperties\",\n  setSelectedPropertyId: \"propertiesModule/setSelectedPropertyId\",\n} as const;\n\ninterface SetProperties {\n  type: typeof Actions.setProperties;\n  payload: Property[];\n}\ninterface SetSelectedPropertyId {\n  type: typeof Actions.setSelectedPropertyId;\n  payload: string;\n}\n\ntype Actions = SetProperties | SetSelectedPropertyId;\n\nconst reducer: Reducer<PropertiesState, Actions> = (\n  state = defaultState,\n  action\n) => {\n  switch (action.type) {\n    case Actions.setProperties: {\n      return {\n        ...state,\n        properties: action.payload,\n      };\n    }\n    case Actions.setSelectedPropertyId: {\n      return {\n        ...state,\n        selectedPropertyId: action.payload,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\n//============== SELECTORS ================\n\nconst getLocalState = (state: RootState): PropertiesState => state.properties;\nconst getProperties = (state: RootState) => getLocalState(state).properties;\nconst getFilteredProperties = (state: RootState) => {\n  const filteredProperties = filterProperties(\n    getProperties(state),\n    filters.selectors.getAllFilters(state)\n  );\n  return filteredProperties;\n};\nconst getSelectedPropertyId = (state: RootState) =>\n  getLocalState(state).selectedPropertyId;\n\nconst getSelectedProperty = (state: RootState) => {\n  const localState = getLocalState(state);\n  return localState.properties.find(\n    (prop) => prop.address === localState.selectedPropertyId\n  );\n};\n\n//============== ACTIONS ================\nexport type ThunkResult<R> = ThunkAction<R, RootState, void, Actions>;\n\nconst setProperties = (properties: Property[]): ThunkResult<void> => (\n  dispatch\n) => {\n  dispatch({\n    type: Actions.setProperties,\n    payload: properties,\n  });\n};\n\nconst setSelectedPropertyId = (id: string): ThunkResult<void> => (dispatch) => {\n  dispatch({\n    type: Actions.setSelectedPropertyId,\n    payload: id,\n  });\n};\n\nconst loadProperties = (): ThunkResult<Promise<void>> => (dispatch) => {\n  return dataSource.loadProperties().then(\n    (data) => {\n      if (data) {\n        dispatch(setProperties(data));\n      }\n    },\n    (error) => {\n      console.error(error);\n    }\n  );\n};\n\nconst refreshSelectedProperty = (): ThunkResult<void> => (dispatch, state) => {\n  const filtered = getFilteredProperties(state());\n  const selectedId = getSelectedPropertyId(state());\n  if (selectedId && !filtered.some((prop) => prop.address === selectedId)) {\n    dispatch(setSelectedPropertyId(\"\"));\n  }\n};\n\nexport default {\n  reducer,\n  actions: {\n    loadProperties,\n    setSelectedPropertyId,\n    refreshSelectedProperty,\n  },\n  selectors: {\n    getProperties,\n    getFilteredProperties,\n    getSelectedProperty,\n    getSelectedPropertyId,\n  },\n};\n","import { Property } from \"data/types\";\nimport { FiltersState } from \"../filters\";\n\nexport const filterProperties = (\n  properties: Property[] = [],\n  {\n    propertyType = \"\",\n    bedroomsQuantity = \"\",\n    bathroomsQuantity = \"\",\n  }: FiltersState\n): Property[] => {\n  let filteredProperties: Property[] = [...properties];\n\n  if (propertyType) {\n    filteredProperties = filteredProperties.filter(\n      (prop) =>\n        prop.propertyType.toLocaleLowerCase() ===\n        propertyType.toLocaleLowerCase()\n    );\n  }\n\n  if (bedroomsQuantity) {\n    filteredProperties = filteredProperties.filter(\n      (prop) => prop.beds === bedroomsQuantity\n    );\n  }\n\n  if (bathroomsQuantity) {\n    filteredProperties = filteredProperties.filter(\n      (prop) => prop.baths === bathroomsQuantity\n    );\n  }\n\n  return filteredProperties;\n};\n","import React from \"react\";\n\ninterface Filter {\n  title: string;\n  options: string[];\n  selected?: string;\n  onChange: (option: string) => void;\n  className?: string;\n}\n\nexport const Filter: React.FC<Filter> = ({\n  title,\n  options,\n  selected,\n  onChange,\n  className,\n}) => {\n  const changeOptionHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    onChange(event.target.value);\n  };\n\n  return (\n    <select\n      className={className}\n      onChange={changeOptionHandler}\n      value={selected || \"\"}\n    >\n      <option value=\"\">{title}</option>\n      {options.map((opt) => {\n        return (\n          <option value={opt} key={`select-${title}-${opt}`}>\n            {opt}\n          </option>\n        );\n      })}\n    </select>\n  );\n};\n\nexport default Filter;\n","import styled from \"styled-components\";\nimport FilterUi from \"components/Filter\";\nimport device from \"utils/devices\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  flex-shrink: 0;\n`;\nexport const FiltersWrapper = styled.div`\n  height: 100px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n\n  @media ${device.desktop} {\n    flex-direction: row;\n  }\n`;\nexport const Title = styled.span`\n  color: #3e88e4;\n  font-size: 24px;\n  margin-bottom: 20px;\n\n  @media ${device.desktop} {\n    margin-bottom: 0;\n  }\n`;\nexport const Filter = styled(FilterUi)`\n  height: 30px;\n  width: 150px;\n  padding: 0 10px;\n  & + & {\n    margin-top: 10px;\n    @media ${device.desktop} {\n      margin-top: 0;\n      margin-left: 20px;\n    }\n  }\n`;\n","import {\n  PROPERTY_TYPE_OPTIONS,\n  BATHS_OPTIONS,\n  BEDS_OPTIONS,\n} from \"data/constants\";\nimport React from \"react\";\nimport { RootState } from \"store\";\nimport filters from \"store/modules/filters\";\nimport { ConnectedProps, connect } from \"react-redux\";\nimport * as Styled from \"./styled\";\n\nconst connector = connect(\n  (state: RootState) => ({\n    propertyType: filters.selectors.getPropertyType(state),\n    bedroomsQuantity: filters.selectors.getBedroomsQuantity(state),\n    bathroomsQuantity: filters.selectors.getBathroomsQuantity(state),\n  }),\n  {\n    setPropertyType: filters.actions.setPropertyType,\n    setBathroomsQuantity: filters.actions.setBathroomsQuantity,\n    setBedroomsQuantity: filters.actions.setBedroomsQuantity,\n  }\n);\n\ntype ReduxProps = ConnectedProps<typeof connector>;\n\nexport const Filters: React.FC<ReduxProps> = ({\n  propertyType,\n  bedroomsQuantity,\n  bathroomsQuantity,\n  setPropertyType,\n  setBathroomsQuantity,\n  setBedroomsQuantity,\n}) => {\n  return (\n    <Styled.Wrapper>\n      <Styled.Title>Filter</Styled.Title>\n      <Styled.FiltersWrapper>\n        <Styled.Filter\n          title=\"Property Type\"\n          options={PROPERTY_TYPE_OPTIONS}\n          onChange={setPropertyType}\n          selected={propertyType}\n        />\n        <Styled.Filter\n          title=\"Bedrooms\"\n          options={BATHS_OPTIONS}\n          onChange={setBedroomsQuantity}\n          selected={bedroomsQuantity}\n        />\n        <Styled.Filter\n          title=\"Bathrooms\"\n          options={BEDS_OPTIONS}\n          onChange={setBathroomsQuantity}\n          selected={bathroomsQuantity}\n        />\n      </Styled.FiltersWrapper>\n    </Styled.Wrapper>\n  );\n};\n\nexport default connector(Filters);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface OwnProps {\n  number: number;\n  lat: string;\n  lng: string;\n  color: string;\n  onClick: () => void;\n  selected?: boolean;\n}\n\nconst MarkerUI = styled.div<{ color: string; selected?: boolean }>`\n  border-radius: 100%;\n  background-color: ${(props) => props.color};\n  width: 20px;\n  height: 20px;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  color: white;\n  cursor: pointer;\n  transition: 0.5s;\n  &:hover {\n    box-shadow: 0 0 6px 6px #2fd4c9;\n  }\n  box-shadow: ${(props) => (props.selected ? \"0 0 6px 6px #2fd4c9;\" : \"none\")};\n`;\n\nexport const Marker: React.FC<OwnProps> = ({\n  number,\n  onClick,\n  color,\n  selected,\n}) => {\n  return (\n    <MarkerUI color={color} onClick={onClick} selected={selected}>\n      {number}\n    </MarkerUI>\n  );\n};\n\nexport default Marker;\n","import styled from \"styled-components\";\nimport device from \"utils/devices\";\n\nexport const MapWrapper = styled.div`\n  width: 100%;\n  height: 300px;\n  border: 1px dashed #3e88e469;\n  border-width: 2px 0 2px 0;\n  padding: 20px 0;\n  position: relative;\n  flex-shrink: 0;\n\n  @media ${device.tablet} {\n    height: initial;\n    flex-grow: 1;\n    padding: 0;\n    border-width: 0;\n  }\n`;\nexport const MessageWrapper = styled.div<{ isVisible: boolean }>`\n  position: absolute;\n  color: rebeccapurple;\n  font-weight: bold;\n  width: 100%;\n  z-index: 1;\n  background: #00000042;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 28px;\n  pointer-events: none;\n  transition: 0.9s;\n  text-shadow: 0 0 5px #000000b0;\n  opacity: ${({ isVisible }) => (isVisible ? \"1\" : \"0\")};\n  top: 20px;\n  height: calc(100% - 40px);\n  text-align: center;\n  @media ${device.tablet} {\n    top: 0;\n    height: 100%;\n  }\n`;\n","import React from \"react\";\nimport { RootState } from \"store\";\nimport { ConnectedProps, connect } from \"react-redux\";\nimport GoogleMapReact from \"google-map-react\";\nimport Marker from \"components/Marker\";\nimport properties from \"store/modules/properties\";\nimport { PROPERTY_COLORS, GOOGLE_MAPS_API_KEY } from \"data/constants\";\nimport * as Styled from \"./styled\";\n\nconst connector = connect(\n  (state: RootState) => ({\n    properties: properties.selectors.getProperties(state),\n    filteredProperties: properties.selectors.getFilteredProperties(state),\n    selectedPropertyId: properties.selectors.getSelectedPropertyId(state),\n  }),\n  {\n    setSelectedPropertyId: properties.actions.setSelectedPropertyId,\n  }\n);\n\ntype ReduxProps = ConnectedProps<typeof connector>;\nconst DEFAULT_CENTER = { lat: -6.131429, lng: -6.26615527 };\nconst DEFAULT_ZOOM = 12;\n\nexport const Map: React.FC<ReduxProps> = ({\n  properties,\n  filteredProperties,\n  selectedPropertyId,\n  setSelectedPropertyId,\n}) => {\n  const googleApiOnLoadHandler = (map: any, maps: any) => {\n    if (filteredProperties && filteredProperties.length) {\n      const bounds = new maps.LatLngBounds();\n      filteredProperties.forEach(({ lat, lon }) => {\n        bounds.extend(new maps.LatLng(lat, lon));\n      });\n      map.fitBounds(bounds);\n    }\n  };\n\n  return (\n    <Styled.MapWrapper>\n      <Styled.MessageWrapper\n        isVisible={!!(properties.length && !filteredProperties.length)}\n      >\n        There is no properties that fits your filters\n      </Styled.MessageWrapper>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: GOOGLE_MAPS_API_KEY }}\n        defaultCenter={DEFAULT_CENTER}\n        defaultZoom={DEFAULT_ZOOM}\n        onGoogleApiLoaded={({ map, maps }) => googleApiOnLoadHandler(map, maps)}\n      >\n        {filteredProperties.length\n          ? filteredProperties.map((prop, index) => {\n              return (\n                <Marker\n                  key={`marker-${prop.address}`}\n                  lat={prop.lat}\n                  lng={prop.lon}\n                  onClick={() => setSelectedPropertyId(prop.address)}\n                  number={index + 1}\n                  color={PROPERTY_COLORS[prop.propertyType.toLowerCase()]}\n                  selected={prop.address === selectedPropertyId}\n                />\n              );\n            })\n          : null}\n      </GoogleMapReact>\n    </Styled.MapWrapper>\n  );\n};\n\nexport default connector(Map);\n","import device from \"utils/devices\";\nimport styled from \"styled-components\";\n\nexport const SelectPropertyMessage = styled.span`\n  font-size: 20px;\n  margin-top: 10px;\n  cursor: default;\n\n  @media ${device.desktop} {\n    margin-top: 28px;\n  }\n`;\n\nexport const Wrapper = styled.article`\n  order: 1;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  flex-shrink: 0;\n\n  @media ${device.tablet} {\n    border: 1px dashed #3e88e469;\n    border-width: 0 2px 0 0;\n    padding-right: 20px;\n    margin-right: 20px;\n    margin: 0 20px 0 0;\n    padding: 0 20px 0 0;\n    order: initial;\n    width: 300px;\n  }\n`;\n\nexport const Title = styled.h1`\n  cursor: default;\n  color: #3e88e4;\n  @media ${device.desktop} {\n    margin: 0 0 92px;\n  }\n`;\n\nexport const InfoTitle = styled.span`\n  margin-bottom: 10px;\n  color: #3e88e4;\n  cursor: default;\n`;\nexport const InfoValue = styled.span`\n  color: black;\n  cursor: default;\n  text-transform: capitalize;\n  font-size: 14px;\n`;\n\nexport const Picture = styled.img`\n  width: 200px;\n  height: 200px;\n  background: lightgray;\n  width: 100%;\n  object-fit: cover;\n`;\n\nexport const Info = styled.div`\n  display: flex;\n  flex-direction: column;\n  & + & {\n    margin-top: 20px;\n  }\n`;\nexport const InfoInRow = styled.div`\n  display: flex;\n  margin: 20px 0;\n  ${Info} + ${Info} {\n    margin: 0 0 0 30px;\n  }\n`;\n","export const DETAILS_STRINGS = {\n  Title: \"Property Details\",\n  GoogleStreetView: \"Google Street View\",\n  Beds: \"Beds\",\n  Baths: \"Baths\",\n  PropertyType: \"Property Type\",\n  Address: \"Address\",\n  Sqm: \"Sqm\",\n  Price: \"Price\",\n  NoInfo: \"Not specified\",\n};\n\nexport default DETAILS_STRINGS;\n","import React from \"react\";\nimport * as Styled from \"./styled\";\n\ninterface Info {\n  title: string;\n  text: string;\n}\nconst SimpleInfo: React.FC<Info> = ({ title, text }) => {\n  return (\n    <Styled.Info>\n      <Styled.InfoTitle>{title}</Styled.InfoTitle>\n      <Styled.InfoValue>{text}</Styled.InfoValue>\n    </Styled.Info>\n  );\n};\n\nexport default SimpleInfo;\n","import React from \"react\";\nimport * as Styled from \"../../widgets/PropertyDetails/styled\";\nimport { STREET_VIEW_LINK_TEMPLATE } from \"data/constants\";\nimport { Property } from \"data/types\";\nimport DETAILS_STRINGS from \"./constants\";\nimport properties from \"store/modules/properties\";\nimport { RootState } from \"store\";\nimport { ConnectedProps, connect } from \"react-redux\";\nimport SimpleInfo from \"./SimpleInfo\";\n\nconst connector = connect((state: RootState) => ({\n  selectedProperty: properties.selectors.getSelectedProperty(state),\n}));\n\ntype ReduxProps = ConnectedProps<typeof connector>;\n\nexport const PropertyDetails: React.FC<ReduxProps> = ({ selectedProperty }) => {\n  if (!selectedProperty) {\n    return (\n      <Styled.Wrapper>\n        <Styled.Title>{DETAILS_STRINGS.Title}</Styled.Title>\n        <Styled.SelectPropertyMessage>\n          Select Property for Details\n        </Styled.SelectPropertyMessage>\n      </Styled.Wrapper>\n    );\n  }\n\n  const {\n    propertyType,\n    address,\n    lat,\n    lon,\n    sqm,\n    price,\n    beds,\n    baths,\n  } = selectedProperty as Property;\n\n  return (\n    <Styled.Wrapper>\n      <Styled.Title>{DETAILS_STRINGS.Title}</Styled.Title>\n      <Styled.InfoTitle>{DETAILS_STRINGS.GoogleStreetView}</Styled.InfoTitle>\n      <Styled.Picture\n        src={`${STREET_VIEW_LINK_TEMPLATE}&location=${lat},${lon}`}\n      />\n      <Styled.InfoInRow>\n        <SimpleInfo\n          title={DETAILS_STRINGS.Beds}\n          text={beds || DETAILS_STRINGS.NoInfo}\n        />\n        <SimpleInfo\n          title={DETAILS_STRINGS.Baths}\n          text={baths || DETAILS_STRINGS.NoInfo}\n        />\n      </Styled.InfoInRow>\n\n      <SimpleInfo\n        title={DETAILS_STRINGS.PropertyType}\n        text={\n          propertyType ? propertyType.toLowerCase() : DETAILS_STRINGS.NoInfo\n        }\n      />\n      <SimpleInfo\n        title={DETAILS_STRINGS.Address}\n        text={address ? address.toLowerCase() : DETAILS_STRINGS.NoInfo}\n      />\n      <SimpleInfo\n        title={DETAILS_STRINGS.Sqm}\n        text={sqm || DETAILS_STRINGS.NoInfo}\n      />\n      <SimpleInfo\n        title={DETAILS_STRINGS.Price}\n        text={`€${price || DETAILS_STRINGS.NoInfo}`}\n      />\n    </Styled.Wrapper>\n  );\n};\n\nexport default connector(PropertyDetails);\n","import React from \"react\";\nimport { PieChart } from \"react-minimal-pie-chart\";\nimport properties from \"store/modules/properties\";\nimport { ConnectedProps, connect } from \"react-redux\";\nimport { RootState } from \"store\";\nimport { PROPERTY_COLORS } from \"data/constants\";\nimport styled from \"styled-components\";\n\nconst connector = connect((state: RootState) => ({\n  properties: properties.selectors.getProperties(state),\n}));\n\ntype ReduxProps = ConnectedProps<typeof connector>;\n\nconst Chart = styled(PieChart)`\n  width: 100px;\n  height: 100px;\n  border-radius: 100%;\n`;\n\nexport const PropertiesChart: React.FC<ReduxProps> = ({ properties }) => {\n  const data = React.useMemo(() => {\n    const types = [...properties].map((props) =>\n      props.propertyType.toLowerCase()\n    );\n    const data: { [key: string]: number } = {};\n\n    types.forEach((propType) => {\n      data[propType] = (data[propType] || 0) + 1;\n    });\n\n    return Object.keys(data).map((propType) => {\n      return {\n        title: propType,\n        color: PROPERTY_COLORS[propType],\n        value: data[propType],\n      };\n    });\n  }, [properties]);\n\n  return (\n    <Chart\n      data={data}\n      totalValue={properties.length}\n      label={({ dataEntry }) => dataEntry.value}\n    />\n  );\n};\n\nexport default connector(PropertiesChart);\n","import React from \"react\";\nimport * as Styled from \"./styled\";\nimport properties from \"store/modules/properties\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { RootState } from \"store\";\nimport { Property } from \"data/types\";\nimport Filters from \"widgets/Filters\";\nimport Map from \"widgets/Map\";\nimport PropertyDetails from \"widgets/PropertyDetails\";\nimport PropertiesChart from \"widgets/PropertiesChart\";\n\ninterface StateProps {\n  properties: Property[];\n}\nconst connector = connect(\n  (state: RootState) => ({\n    properties: properties.selectors.getProperties(state),\n  }),\n  {\n    loadProperties: properties.actions.loadProperties,\n  }\n);\n\ntype ReduxProps = ConnectedProps<typeof connector>;\n\nexport const Main: React.FC<StateProps & ReduxProps> = ({\n  properties,\n  loadProperties,\n}) => {\n  React.useEffect(() => {\n    if (!properties || !properties.length) {\n      loadProperties();\n    }\n  }, [properties, loadProperties]);\n\n  return (\n    <Styled.Wrapper>\n      <PropertyDetails />\n      <Styled.Content>\n        <Styled.Header>\n          <Filters />\n          <Styled.ChartWrapper>\n            <PropertiesChart />\n            <Styled.ColorPallet />\n          </Styled.ChartWrapper>\n        </Styled.Header>\n        <Map />\n      </Styled.Content>\n    </Styled.Wrapper>\n  );\n};\n\nexport default connector(Main);\n","import { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport properties, { PropertiesState } from \"./modules/properties\";\nimport filters, { FiltersState } from \"./modules/filters\";\nimport { createStore, applyMiddleware, combineReducers, Reducer } from \"redux\";\n\nexport interface RootState {\n  properties: PropertiesState;\n  filters: FiltersState;\n}\n\nexport const rootReducer: Reducer<RootState> = combineReducers<RootState>({\n  properties: properties.reducer,\n  filters: filters.reducer,\n});\n\nexport function initStore() {\n  return createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Home from \"./pages/Home\";\n\nimport { initStore } from \"store\";\nimport { Provider } from \"react-redux\";\n\nconst store = initStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <Home />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}